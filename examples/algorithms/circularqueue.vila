lớp CircularQueue
{
    khởi_tạo(length)
    {
        đây.length = length;
        đây.queue = [];

        đây.head = -1;
        đây.tail = -1;
    }

    enqueue(data)
    {
        nếu (đây.is_empty())
        {
            đây.head = 0;
        }

        đây.tail = (đây.tail + 1) % đây.length;
        đây.queue[đây.tail] = data;
    }

    dequeue()
    {
        // nếu there's 1 element
        nếu (đây.head == đây.tail)
        {
            đây.head = -1;
            đây.tail = -1;
        }

        đây.head = (đây.head + 1) % đây.length;
    }

    print_cqueue()
    {
        nếu (đây.head == -1) // empty queue
        {
            in("No element in the circular queue");
        }
        thì nếu (đây.tail >= đây.head) // normal order
        {
            với (biến i = đây.head; i < đây.tail + 1; i += 1)
            {
                in(đây.queue[i]);
            }
        }
        thì // circular order
        {
            với (biến i = đây.head; i < đây.length; i += 1)
            {
                in(đây.queue[i]);
            }

            với (biến i = 0; i < đây.tail + 1; i += 1)
            {
                in(đây.queue[i]);
            }
        }
    }

    front()
    {
        nếu (đây.is_empty())
        {
            trả -1;
        }

        trả đây.queue[đây.head];
    }

    rear()
    {
        nếu (đây.is_empty())
        {
            trả -1;
        }

        trả đây.queue[đây.tail];
    }

    is_empty()
    {
        trả đây.head == -1;
    }

    is_full()
    {
        trả ((đây.tail + 1) % đây.length) == đây.head;
    }
}

biến cqueue = CircularQueue(6);
cqueue.enqueue("A");
cqueue.enqueue("B");
cqueue.enqueue("C");

in("Initial queue:");
cqueue.print_cqueue();

biến front = cqueue.front();
biến rear = cqueue.rear();
in("Front: " + front + ", Rear: " + rear);
in("");

cqueue.enqueue("D");

in("Queue with 'E' added:");
cqueue.print_cqueue();

front = cqueue.front();
rear = cqueue.rear();
in("Front: " + front + ", Rear: " + rear);
in("");

cqueue.dequeue();
cqueue.dequeue();

in("Dequeued twice:");
cqueue.print_cqueue();

front = cqueue.front();
rear = cqueue.rear();
in("Front: " + front + ", Rear: " + rear);

cqueue.enqueue("A");
cqueue.enqueue("B");
cqueue.enqueue("E");
cqueue.enqueue("F");

in("Enqueued 4 times:");
cqueue.print_cqueue();

front = cqueue.front();
rear = cqueue.rear();
in("Front: " + front + ", Rear: " + rear);
