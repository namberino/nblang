class Tree
{
    init(item, depth)
    {
        this.item = item;
        this.depth = depth;

        if (depth > 0)
        {
            mut item2 = item + item;
            depth -= 1;
            this.left = Tree(item2 - 1, depth);
            this.right = Tree(item2, depth);
        }
        else
        {
            this.left = nil;
            this.right = nil;
        }
    }

    check()
    {
        if (this.left == nil)
        {
            return this.item;
        }

        return this.item + this.left.check() - this.right.check();
    }
}

mut min_depth = 4;
mut max_depth = 12;
mut stretch_depth = max_depth + 1;

mut start = clock();

print("Stretch tree depth: " + stretch_depth);
print("Check: " + Tree(0, stretch_depth).check());

mut long_lived_tree = Tree(0, max_depth);

// iterations = 2 ** max_depth
mut iterations = 1;
mut d = 0;

while (d < max_depth)
{
    iterations *= 2;
    d += 1;
}

mut depth = min_depth;

while (depth < stretch_depth)
{
    mut check = 0;
    mut i = 1;

    while (i <= iterations)
    {
        check += Tree(i, depth).check() + Tree(-i, depth).check();
        i += 1;
    }

    print("Num trees: " + iterations * 2);
    print("Depth: " + depth);
    print("Check: " + check);

    iterations /= 4;
    depth += 2;
}

print("");
print("Long lived tree of depth: " + max_depth);
print("Check: " + long_lived_tree.check());
print("Elapsed: " + (clock() - start));
