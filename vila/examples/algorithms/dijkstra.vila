lớp Graph
{
    khởi_tạo(vertices)
    {
        đây.vertices = vertices;
        đây.graph = [];

        với (biến row = 0; row < vertices; row += 1)
        {
            biến li = [];

            với (biến col = 0; col < vertices; col += 1)
            {
                li[col] = 0;
            }

            đây.graph[row] = li;
        }
    }

    print_paths(dist)
    {
        in("Vertex and distance from source");
        với (biến node = 0; node < đây.vertices; node += 1)
        {
            in(node + 1 + " | " + dist[node]);
        }
    }

    min_dist(dist, sptset)
    {
        biến min = 10000000;
        biến min_index;

        với (biến v = 0; v < đây.vertices; v += 1)
        {
            nếu (dist[v] < min và sptset[v] == sai)
            {
                min = dist[v];
                min_index = v;
            }
        }

        trả min_index;
    }

    dijkstra(source)
    {
        biến dist = [];
        với (biến i = 0; i < đây.vertices; i += 1)
        {
            dist[i] = 10000000;
        }
        dist[source] = 0;

        biến sptset = [];
        với (biến i = 0; i < đây.vertices; i += 1)
        {
            sptset[i] = sai;
        }

        với (biến cout = 0; cout < đây.vertices; cout += 1)
        {
            biến u = đây.min_dist(dist, sptset);
            sptset[u] = đúng;

            với (biến v = 0; v < đây.vertices; v += 1)
            {
                nếu (đây.graph[u][v] > 0 và sptset[v] == sai và dist[v] > dist[u] + đây.graph[u][v])
                {
                    dist[v] = dist[u] + đây.graph[u][v];
                }
            }
        }

        đây.print_paths(dist);
    }
}

biến g = Graph(6);
g.graph = [
	[0, 16, 0, 0, 19, 21],
    [16, 0, 5, 6, 0, 11],
    [0, 5, 0, 10, 0, 0],
    [0, 6, 10, 0, 18, 14],
    [19, 0, 0, 18, 0, 33],
    [21, 11, 0, 14, 33, 0]
];

g.dijkstra(0);
